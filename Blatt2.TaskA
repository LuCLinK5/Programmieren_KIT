
public class TaskA {

	
	public static void main(String args[]){ 
	
		String word = "qADCDqq";
		char chart = ' ';
		System.out.println(reverse(word));
		System.out.println(isPalindrome(word));
		System.out.println(removeCharacter(word, 0));
		System.out.println(isAnagram(word, "DDCAqq"));
		System.out.println(countCharacter(word, chart));
	}	
	
	
	static String reverse(String word) {
		int i = word.length()-1;
		char letter;
		String rev_word_new = "";
		
		while (i+1>0) {
			letter = word.charAt(i);
			rev_word_new = rev_word_new + letter;
			i = i - 1;
		}
		
		word = rev_word_new;
	 word;
	}
	
	static boolean isPalindrome(String word) {
		boolean tf;
		String rev_word = reverse(word);
		
		if (word.equals(rev_word)) {
			
			tf = true;
			
		} 
		else {
			
			tf = false;
			
		}
		
		return tf;
	}
	
	static String removeCharacter(String word, int index) {
		
		int i = 0;
		int length = word.length()-1;
		char letter;
		int z = index + 1;
				
		String first_half = "", second_half = "";
		
		if (index != 0) {
			while  (i < index) {
				letter = word.charAt(i);
				first_half = first_half + letter; 
				i++;
			}
		}
		else {
			
			first_half = "";
		
		}
		
		i = 0;
		
		while  (z < length + 1) {
			letter = word.charAt(z);
			second_half = second_half + letter;
			z++;
		}
		
		return word = first_half + second_half;
	}
	
	static boolean isAnagram(String first, String second) {
		
		first = first.trim().toLowerCase();
		second = second.trim().toLowerCase();
		boolean x_array[] = new boolean[first.length()];
		boolean x = false;
		char first_letters[];
		char first_letters_2[];
		char second_letters[];
		char second_letters_2[];
		int counter1 = 0, counter2 = 0;
		
		first_letters = new char[first.length()];
		first_letters_2 = new char[first.length()];
		second_letters = new char[second.length()];
		second_letters_2 = new char[second.length()];
		
		if (first.length() == second.length()) {
			
			for (int i = 0; i < first.length(); i++) {
				
				for (int q = 0; q < first.length(); q++) {
					
					first_letters[i] = first.charAt(i);
					first_letters_2[q] = first.charAt(q);
					System.out.println(first_letters[i] + " " + i +" X "+ first_letters_2[q] + " " + q + " First length: " + first.length() + " Counter1: " + counter1);
					
					if(first_letters[i] == first_letters_2[q] && i != q) {
						
						if(q < first.length()) {
							counter1 = counter1 + 1;
						first = removeCharacter(first, i);
						System.out.println("New Name: " + first);
						
						x_array = new boolean[first.length()];
						
						i = 0;
						q = 0;
						
						}
						
					}
							
				}
				
				for (int f = 0; f < second.length(); f++) {
					
					for (int n = 0; n < second.length(); n++) {
						
						second_letters[f] = second.charAt(f);
						second_letters_2[n] = second.charAt(n);
						System.out.println(second_letters[f] + " " + f +" x "+ second_letters_2[n] + " " + n + " First length: " + second.length() + " Counter2: " + counter2);
						
						if (second_letters[f] == second_letters_2[n] && f != n) {
							
							if (n < second.length()) {
								
								counter2 = counter2 + 1;
								
							second = removeCharacter(second, f);
							
							System.out.println("New Name: " + second);
							
							f = 0;
							n = 0;
							
							}
						}		
					}
			}
				
						
				for (int o = 0; o < first.length(); o++) {
					
					first_letters[o] = first.charAt(o);
					
					for (int z = 0; z < second.length(); z++) {
						
						second_letters[z] = second.charAt(z);
						
						if (first_letters[o] == second_letters[z]) {
							
								x_array[o] = true;
								
						}	
					}
				}
		}
				
			if (first.length() == second.length()) {
				
			for (int a = 0; a < first.length(); a++) {
				
				if (x_array[a] = true) {
					 
					x = true;
					
				}
				else {
					
					x = false;
					
					continue;
					
				}
			}
		}
		else {
				
				x = false;
				
			}
			
	}
			
		return x;
		
	}
	
	static int countCharacter(String word, char character) {
		
		int counter = 0;
		
		if (character != '\0') {
		char letter[] = new char[word.length()];
		
		for (int i = 0; i < word.length(); i++) {
			letter [i] = word.charAt(i);
			
			if (letter[i] == character) {
				counter = counter + 1;
				}			
			}
		}
		return counter;
	}
}
